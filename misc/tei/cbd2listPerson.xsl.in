<xsl:stylesheet version="1.0" 
		xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
		xmlns:xl="http://www.w3.org/1999/xlink"
		xmlns:tei="http://www.tei-c.org/ns/1.0"
		xmlns="http://www.tei-c.org/ns/1.0"
		xmlns:c="http://oracc.org/ns/cbd/1.0"
		exclude-result-prefixes="c">

<!-- @SUMMARY@= Create TEI &lt;listPerson> from Corpus-Based Dictionary -->

<xsl:param name="version" select="1.0"/>
<xsl:param name="project"/>
<xsl:output method="xml" indent="yes" encoding="utf-8"/>

<xsl:key name="cfs" match="c:cf" use="text()"/>

<xsl:template match="/">
  <xsl:param name="datestamp" 
	     select="document('http://@@ORACC_HOST@@/datestamp')/*"/>
  <TEI>
    <teiHeader>
      <fileDesc>
	<titleStmt>
	  <title>TEI listPerson from <xsl:value-of select="$project"/>/lib/qpn.glo</title>
	  <respStmt>
	    <resp>generated by</resp>
	    <name type="program">cbd2listPerson.xsl 1.0</name>
	  </respStmt>
	</titleStmt>
	<publicationStmt>
	  <availability><p>Electronic manuscript</p></availability>
	  <date><xsl:value-of select="$datestamp"/></date>
	</publicationStmt>
	<sourceDesc>
	  <p>This is a personList derived programmatically from the 
	  project's proper noun glossary (lib/qpn.glo)</p>
	</sourceDesc>
      </fileDesc>
    </teiHeader>
    <text type="listPerson">
      <body>
	<listPerson>
	  <xsl:apply-templates mode="person"/>
	  <xsl:apply-templates mode="relation"/>
	</listPerson>
      </body>
    </text>
  </TEI>
</xsl:template>

<xsl:template mode="person" match="c:cf">
  <xsl:if test="../c:pos[.='PN' or .='RN']">
    <person>
      <xsl:attribute name="xml:id">
	<xsl:value-of select="concat('per.',../@xml:id)"/>
      </xsl:attribute>
      <xsl:attribute name="sex">
	<xsl:choose>
	  <xsl:when test="../c:prop[@name='gender']/@value='m'">
	    <xsl:text>1</xsl:text>
	  </xsl:when>
	  <xsl:when test="../c:prop[@name='gender']/@value='f'">
	    <xsl:text>2</xsl:text>
	  </xsl:when>
	  <xsl:otherwise>
	    <xsl:text>0</xsl:text>
	  </xsl:otherwise>
	</xsl:choose>
      </xsl:attribute>
      <xsl:if test="../c:pos[.='RN']">
	<xsl:attribute name="role">
	  <xsl:text>royal</xsl:text>
	</xsl:attribute>
      </xsl:if>
      <persName n="{concat(text(),'[',../c:gw,']')}">
	<xsl:value-of select="text()"/>
      </persName>
    </person>
  </xsl:if>
</xsl:template>

<xsl:template mode="relation" match="c:prop[@ref]">
  <xsl:choose>
    <xsl:when test="@name='ancestor'">
      <xsl:call-template name="act-pass-reln"/>
    </xsl:when>
    <xsl:when test="@name='father'">
      <xsl:call-template name="act-pass-reln"/>
    </xsl:when>
    <xsl:when test="@name='gfather'">
      <xsl:call-template name="act-pass-reln">
	<xsl:with-param name="name" select="'grandfather'"/>
      </xsl:call-template>
    </xsl:when>
  </xsl:choose>
</xsl:template>

<xsl:template name="act-pass-reln">
  <xsl:param name="name" select="@name"/>
  <relation type="personal" 
	    name="{$name}"
	    active="{concat('#per.',@ref)}" 
	    passive="{concat('#per.',../@xml:id)}"/>
</xsl:template>

<xsl:template match="text()"/>
<xsl:template mode="person" match="text()"/>
<xsl:template mode="relation" match="text()"/>

</xsl:stylesheet>
