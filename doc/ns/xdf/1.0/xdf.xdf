<?xml version='1.0' encoding='utf-8'?>
<d:doc  xmlns="http://www.w3.org/1999/xhtml" 
	xmlns:d="http://oracc.org/ns/xdf/1.0"
	xmlns:dc="http://purl.org/dc/elements/1.1"
	xmlns:dcterms="http://purl.org/dc/terms/"
	xmlns:h="http://www.w3.org/1999/xhtml" 
   	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

<d:meta>
  <dc:title>XDF</dc:title>
  <dcterms:alternative>XML Documentation Format</dcterms:alternative>
  <dcterms:identifier 
      xsi:type="dcterms:URI">http://oracc.org/ns/xdf/1.0</dcterms:identifier>
  <dc:creator>Steve Tinney</dc:creator>
  <dc:date>1/17/06</dc:date>
  <dc:publisher>CDLG</dc:publisher>
  <dc:description>The XDF format is an XML vocabulary which blends
  special-purpose tags, RelaxNG, Dublin Core metadata, and XHTML to
  implement a literate XML programming environment for RelaxNG's
  compact syntax.  Because XDF formalizes the metadata component of
  the work and creates a TOC automatically, it is also useful for
  general purpose documentation.</dc:description>
</d:meta>

<p>There is a tutorial on XDF <a href="/doc/developer/xdftut/">in the 
developer documentation</a>, along with downloadable schemas and an XDF 
template.</p>

<h1 id="authoring">Authoring</h1>

<p>Authors have the relevant subset of XHTML-strict at their disposal
(i.e., containing head, structure, server-side-includes, and a few
other HTML-page related constructs are not included) with styling
enforced by <code>xdf.css</code>.  The CSS supports several
element/class combinations which are particularly useful for
documentation, which are described in the 
<a href="/doc/developer/xdftut/">XDF tutorial</a>.</p>

<h1 id="processing">Processing</h1>

<p>An <abbr title="XML Document Format">XDF</abbr> document can be
initialized from a template generator or created by hand.  The
document is then processed using a Perl program,
<code>xdfmanager.plx</code>, otherwise known as `the XDF
processor'.</p>

<p>Processing consists of several possible phases and results;
processing ceases after any unsuccessful validation phase.  The
following processing phases may be carried out:</p>

<ol>
  <li>The document is first validated against the XDF schema.</li>
  <li>If the document contains a <code>schema</code> element:
    <ul>
      <li>the text content of all <code>rnc</code> children is concatenated
	to produce an RNC grammar and written to [TITLE].rnc</li>
      <li>the RNC is validated using <code>rnv -c</code></li>
      <li>the RNC is converted to RNG using Trang</li>
    </ul>
  </li>
  <li>If the document contains a <code>resources</code> element, the
  behaviour is dependent on whether or not the <code>resources</code>
  element has any <code>resource</code> children:
    <ul>
      <li>If there are no children, the XDF processor searches for
      resources in the document directory.</li>
      <li>Otherwise, each of the specified child resources is
      processed.  See below under <a href="#resources">Resource
      Inclusion</a> for further details on resource processing.</li>
    </ul>
  </li>
  <li>An XHTML-strict document is generated, named by default
  'index.html'; the document is validated using James Clark's XHTML
  RNG schema.  Features of this document include:
    <ul>
      <li>Autogenerated table-of-contents division</li>
      <li>Autogenerated header (derived from metadata fields)</li>
      <li>Automated interpolation of concatenated RNC schema at head
      of schema documentation</li>
    </ul>
  </li>
<!--TODO
  <li>If the <code>meta</code> element contains a
  <code>dcterms:identifier</code>, the XDF document is taken as a
  namespace-definition document and a RDDL document is produced, named
  by default '[TITLE]-rddl.html'.</li>
 -->
</ol>

<!-- TODO list item:
<h1 id="resources">RDDL</h1>
<table>
<caption>table of types, extensions, nature/purposes goes here</caption>
</table>
-->

<d:schema name="xdf" uri="http://oracc.org/ns/xdf/1.0">
  <h2>Preamble</h2>
  <p>Besides the obvious namespace definitions, XDF uses XHTML strict.</p>
  <d:rnc>
default namespace = "http://oracc.org/ns/xdf/1.0"
namespace dc = "http://purl.org/dc/elements/1.1"
namespace dcterms = "http://purl.org/dc/terms/"
namespace xsi = "http://www.w3.org/2001/XMLSchema-instance"
include "xhtml/rnc/xhtml-strict.rnc" {
  start = empty
  title = empty
}
  </d:rnc>
  <h2>Start</h2>
  <p>The basic structure of an XDF file is a metadata block followed
  by the documentation proper.  If the <code>index-dir</code>
  attribute is given the XDF processor will generate
  <code>index.html</code> in the given directory rather than the
  default <code>./html</code>.  The named directory must exist.</p>
  <d:rnc>
start &amp;= xdf.doc

xdf.doc =
  element doc { 
    attribute index-dir { text }?,
    attribute html-name { text }?,
    xdf.meta , xdf.secondary* , xdf.doco 
  }
  </d:rnc>
  <h2>xdf.meta</h2>
  <p>In the metadata block, title and description are required.</p>
  <p>The element alternative is used when documenting a schema and is
  intended to give the expansion of the abbreviation.  When this is
  given, the identifier is also required and should give the URI of
  the documented schema's namespace.</p>
  <d:rnc>
xdf.meta =
  element meta { 
    element dc:title { text } ,
    (element dcterms:alternative { text } ,
     element dcterms:identifier {
       attribute xsi:type { xsd:anyURI } ,
       text
     }
    )? ,
    element dc:creator     { text }? ,
    element dc:date        { text }? ,
    element dc:publisher   { text }? ,
    element dc:description { Inline.model }
  }
  </d:rnc>
  <p>The XDF processor uses the metadata given in <code>meta</code> to
  supply a title for the document (the <code>&lt;title></code> element
  in the header) and to generate an XHTML div of the following form,
  where the material in square brackets is drawn from the relevant
  metadata element:</p>
  <pre class="example">
&lt;div class="meta">
&lt;h1 class="title">[TITLE]&lt;/h1>
&lt;h1 class="author">[AUTHOR]&lt;/h1>
&lt;h1 class="date">[DATE]&lt;/h1>
&lt;h1 class="publisher">[PUBLISHER]&lt;/h1>
&lt;h1>Introduction&lt;/h1>
&lt;p>[DESCRIPTION]&lt;/p>
&lt;/div></pre>
  <h2>xdf.secondary</h2>
  <p>Documentation may be multi-threaded, with a secondary threads
  represented by some characteristic applied to document nodes to
  allow their selection for the secondary documents.  Nodes are dropped
  from the primary document if their <code>class</code> attribute
  contains the string <code>secondary</code>.</p>
  <p>A secondary document has its own <code>meta</code> block, an
  XPath giving the nodes to select for the document, and an output
  specifier.  It may also have an ID or name.</p>
  <d:rnc>
xdf.secondary = 
  element secondary {
    attribute xml:id { xsd:ID }? ,
    attribute n { xsd:NCName } ,
    xdf.meta , 
    element select { text } ,
    element output { attribute file { text } }
  }
  </d:rnc>
  <h2>xdf.doco</h2>
  <p>The documentation proper is modeled by the <code>xdf.doco</code>
  definition.  Block.model comes from the XHTML specification and
  allows any XHTML block content to be intermingled with the XDF tags.
  For non-schema documentation this is normally the bulk of the
  content of an XDF document.</p> <p>An XDF file may be a directory or
  a documentation file; a directory can have multiple
  <code>directory</code> elements but none of the other XDF elements
  (this restriction may be removed in a later version).</p>
  <p>Documentation that covers programs or system segments may also
  include configuration documentation given using the
  <code>config</code> tag.  Such configuration information
  automatically generates a schema suitable for validating
  configuration files for the target program(s).</p> <p>Schemas are
  optional and a single document may cover multiple schemas as
  exemplified in the <a href="../XMD/">XMD documentation</a>.</p>
  <p>The resources section is optional, but may occur at most once and
  must occur after any schemata.</p>
  <d:rnc>
xdf.doco = 
  Block.model* 
  &amp; (xdf.directory+
         | (xdf.config* , xdf.schema* , xdf.resources? , xdf.refs?))
  </d:rnc>
  <h3 id="directory">&lt;directory></h3>
  <p>The directory implementation is presently quite simple; a list of
  directories is given in the <code>dirs</code> attribute and these
  are searched for a file named <code>index.html</code>.  An XHTML
  <code>dl</code> block is created in which the name of the described
  item is the directory and the description is pulled from
  <code>index.html</code>.  A link is created from the item name to
  the html file.  Greater flexibility is anticipated for a future
  version.</p>
  <d:rnc>
xdf.directory =
  element directory {
    attribute dirs { token }
  }
  </d:rnc>
  <h3 id="config">&lt;config></h3>
  <p>The <code>config</code> element supports documentation of <a
  href="../XCF/">XCF</a> configuration variables.  The configuration
  schema is written to a file whose basename is given by the attribute
  <code>name</code>, with the conventional extension <code>.rnc</code>
  in the directory named by <code>path</code>.  If the
  <code>path</code> attribute is missing the <code>output</code> must
  be present with the value <code>no</code>; such blocks are useful
  for defining common variable groups to be reused in several config
  files.</p>
  <p>A configuration block may be reused by referencing its name with
  the <code>use</code> element.  This permits modular description of
  configuration files.</p>
  <p>Zero or more <code>for</code> elements indicate which programs in
  the documented subsystem use this configuration block; each program
  named in the block is scanned for POD documentation
  and an appropriate documentation section is added to the HTML version
  of the POD.</p>
  <p>The <code>var</code> element gives the definition and description
  of a variable.  The name of the variable is given in
  <code>name</code>, the repeat-count in <code>times</code>.  The
  repeat-count is either the asterisk (<code>*</code>) indicating
  that the variable can be given any number of times in the
  configuration file; the plus sign (<code>+</code>) indicating that
  the variable must be given one or must times; or an integer
  specifying the exact number of times the variable must occur in the
  configuration file.</p>
  <p>The variable's XCF type is determined by inference from the
  content of the <code>var</code> element.  Variables are XCF type
  <code>simple</code> when the content is <code>text</code> text.
  Otherwise they are XCF type <code>table</code>.</p>
  <p>The optional <code>type</code> attribute on <code>var</code>
  gives the expected type of the argument value; if given it must be
  one of the XML-Schema datatypes or a sequence of tokens.  If omitted
  the default is <code>xsd:string</code>.</p>
  <p>The text content of a <code>var</code> gives the description of
  the variable used in documenting it.</p>
  <d:rnc>
xdf.config =
  element config {
    attribute name { xsd:NCName } ,
    (attribute path { text } | attribute output { "none" }) ,
    Block.model? ,
    element for { attribute name { xsd:NCName }}* ,
    element use { attribute name { xsd:NCName }}* ,
    element var {
      attribute name { xsd:NCName } ,
      attribute type { type.model }? ,
      attribute times { '*' | '+' | '?' | xsd:integer } ,
      (text | tablevar)
    }+
  }

type.model = ( "^xsd:.*$" | xsd:token )
  </d:rnc>
  <p>A table variable is described by enclosing documentation relevant
  to the variable as a whole in the <code>txt</code> child of the
  <code>var</code>.  Each entry in the table is then named and may
  itself be described in the text content of the <code>key</code>
  element.</p>
  <d:rnc>
tablevar =
  ( element txt { text } ,
    element key {
      attribute name { xsd:NCName } ,
      attribute type { type.model }? ,
      attribute required { xsd:boolean }?,
      text
    }+
  )
  </d:rnc>
  <h3>&lt;schema></h3>
  <p>The <code>schema</code> element supports literate RNC
  programming.  Alternating blocks of documentation and RNC fragments
  are turned into XHTML documentation and RNC/RNG schemas as described
  above under <a href="#processing">processing</a>.</p>
  <p>A schema requires a name and a URI; the name is typically
  used in applications as the namespace prefix.</p>
  <d:rnc>
xdf.schema = 
  element schema { 
    attribute name   { xsd:NCName } ,
    attribute uri    { xsd:anyURI } ,
    (Block.model | rnc)*
}
  </d:rnc>
<p>The <code>rnc</code> element contains a fragment of RNC; if the
<code>preprocess</code> attribute is <code>1</code> the XDF processor
first saves the block for display in the documentation, then
preprocesses it for inclusion in the RNC output.</p>
<p>The preprocessor performs two operations:</p>
<dl>
<dt>Variable definition</dt>
<dd>Lines starting with <code>$</code> (the dollar sign) are taken as
variable definitions which must match the syntax <code>$VAR =
DEF</code>, where <code>VAR</code> is an identifier matching
<code>[A-Za-z0-9_]+</code> and <code>DEF</code> is a literal
definition terminated by the end of the line.  Newlines are not
supported in variable definitions.  Variable definitions are removed
from the RNC fragment after processing.  To include a literal dollar
sign in an RNC block which will be preprocessed simply double it
(<code>$$</code>).</dd>
<dt>Variable substitution</dt>
<dd>The preprocessor performs simple substitution of any
sequence consisting of <code>${VAR}</code> being replaced by the value
of the variable <code>VAR</code> if and only if <code>VAR</code> has
been defined.</dd>
</dl>
<d:rnc>
rnc =
  element rnc { 
    attribute preprocess { xsd:boolean }?,
    text
  }
  </d:rnc>
  <h3 id="resources">&lt;resources></h3>
  <p>The <code>resources</code> element is either empty or gives a
  list of resources to process and reference; if it is non-empty, the
  element may also contain XHTML block-level elements interspersed with
  <code>resource</code> elements.</p>
  <p>If the resources element is empty, a list of resources is
  generated automatically from the contents of the XDF file's
  directory.  Three attributes control the selection, organization and
  formatting of the list:</p>
  <dl>
    <dt><code>auto</code></dt><dd>If <code>0</code> do not scan the
    current directory for resources; default <code>1</code>.</dd>
    <dt><code>sort</code></dt><dd>If <code>0</code> do not sort
    the list of resources; default <code>1</code>, i.e., sort list
    by resource name.</dd>
    <dt><code>wrap</code></dt><dd>If <code>0</code> do not wrap the
    list in a <code>div</code>, and do not generate the default
    <code>h1</code> labelling the resources block; default
    <code>1</code>.</dd>
  </dl>
  <d:rnc>
xdf.resources = 
  element resources {
    attribute auto { xsd:boolean }? ,
    attribute sort { xsd:boolean }? ,
    attribute wrap { xsd:boolean }? ,
    (Block.model* &amp; xdf.resource)* 
  }
  </d:rnc>
  <p>Explicitly named resources may be given with the
  <code>resource</code> element; the <code>copy</code> attribute
  results in the resource being copied into the target directory where
  other HTML products are being generated; this should be used to
  ensure that a resource referenced in an XDF source file is available
  in the HTML result.</p>
  <d:rnc>
xdf.resource =
  element resource {
    attribute copy { "yes" }? ,
    attribute href { xsd:anyURI }
  }
  </d:rnc>
  <p>The result list is output as an XHTML <code>dl</code> element
  giving the the resource name, linked to a displayable form of the
  resource, and the summary description of the resource's purpose.</p>
  <p>Displayable versions of a resource are firstly the source code
  listing with syntax-colorization (added using <a
  href="http://colorer.sf.net"><code>colorer</code></a> for non-XML
  types; with <code>xmlformat.plx</code> for XML types).  If a
  resource has its own documentation (typically Perl programs with POD
  documentation) this is also preformatted as HTML.  For resources
  with both documentation and a listing, the resource-name links to
  the documentation and an additional <code>[listing]</code> link is
  provided.</p>
  <p>For resources with POD documentation, the summary is derived from
  the POD's NAME header.  Alternatively, a resource may contain a
  <code>&#x40;SUMMARY@=</code> line, typically embedded in whatever comment
  syntax is permitted by that resource.  Examples:</p>
  <pre class="example">
&lt;!-- &#x40;SUMMARY@= an XSLT program to construct pathnames -->

# &#x40;SUMMARY@= a shell program to list a directory</pre>
  <p>For several file types rules are used to generate an implicit
  summary based on the file name if there is no explicit summary
  embedded in the file.  These presently include <code>.css</code>,
  <code>.js</code>, <code>.rnc</code> and <code>.rng</code>.  In
  addition <code>.xsl</code> filenames matching the pattern
  <code>X-Y</code> are assumed to indicate conversion from X to Y.</p>
  <h3 id="references">&lt;references></h3>
  <p>References can either be given as tokens in a <code>refs</code>
  attribute, in which case they must be defined in the default
  references file (see <code>refs.xml</code> under Resources), or they
  can be named in individual <code>ref</code> elements.  Both forms
  may be combined in a single <code>references</code> element.</p>
  <p>References must either have a URI or be a proper bibliographical
  record (this is currently a simple string).  References with a URI
  require a name and a short descriptive text; references with a
  bibliographical record need only a name (normally a standard
  abbreviation).  The XDF processor builds a reference list at the
  point of the <code>references</code> element.</p>
  <d:rnc>
  xdf.refs = element references { 
      refs.attr | (refs.attr? , refs.model)
    }

  refs.attr = attribute refs { token }

  refs.model = (Block.model* &amp; refs.elem)* 

  refs.elem = 
    element ref {
      attribute name { text } ,
      ((attribute uri { xsd:anyURI } , text)
       | element bib { text })
  }
  </d:rnc>
</d:schema>

<d:resources/>

<d:references refs="XHTML"/>

</d:doc>
